// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @id
  email         String?      @unique
  name          String
  onboarded     Boolean      @default(false)
  passwordHash  String?
  googleId      String?      @unique
  leagues       UserLeague[]
  rosters       Roster[]
  sessions      Session[]

  createdAt     DateTime     @default(now())

  @@map("users")
}

model League {
  id            String       @id
  name          String
  type          String
  avatar        String?
  users         UserLeague[]
  rosters       Roster[]

  @@map("leagues")
}

model UserLeague {
  id        String  @id @default(cuid())
  userId    String
  leagueId  String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  league    League  @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])

  @@map("user_leagues")
}

model Roster {
  id        String   @id
  userId    String
  leagueId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  players   RosterPlayer[]

  @@map("rosters")
}

model Player {
  playerId    String @unique @id
  firstName   String
  lastName    String
  position    String
  rosters     RosterPlayer[]

  @@map("players")
}

model RosterPlayer {
  id        String  @id @default(cuid())
  rosterId  String
  playerId  String
  roster    Roster  @relation(fields: [rosterId], references: [id], onDelete: Cascade)
  player    Player  @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@unique([rosterId, playerId])

  @@map("roster_players")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
